name: "App"

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/app.yml
      - 'src/**'
      - pom.xml
      - 'k8s/**'
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/app.yml
      - 'src/**'
      - pom.xml
      - 'k8s/**'

jobs:
  app:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify
        run: mvn verify -DskipITs=false -q

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::202062340677:role/TechChallengeInfraDeployer
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push docker image to Amazon ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: "latest"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kubeconfig
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: aws eks update-kubeconfig --name ${{ vars.AWS_EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Deploy to EKS
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          kubectl apply -f k8s/postgres-deployment.yml
          kubectl apply -f k8s/postgres-svc.yml
          kubectl apply -f k8s/postgres-pvc.yml
          kubectl apply -f k8s/postgres-secret.yml
          kubectl apply -f k8s/postgres-volume.yml
          kubectl apply -f k8s/self-order-management-secret.yml
          kubectl apply -f k8s/self-order-management-deployment.yml
          kubectl apply -f k8s/self-order-management-hpa.yml
          kubectl apply -f k8s/self-order-management-load-balancer.yml
          kubectl apply -f k8s/self-order-management-svc.yml
